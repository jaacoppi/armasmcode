#############################################################################
# Makefile for building: armv8bin
# Generated by hand from a qmake template
#############################################################################

####### Compiler, tools and options

# for freebsd
AS	= aarch64-freebsd-as
# for some reasons, freebsd can't handle ASFLAGS
AS	+= -mverbose-error -I include
LD	= aarch64-freebsd-ld

# for linux
#AS	= aarch64-linux-gnu-as
#ASFLAGS = -mverbose-error -I include
#LD	= aarch64-linux-gnu-ld

# linker script for kernel
LDFLAGS = -T src/linker.ld
# for creating STDLIB
AR	= ar
ARFLAGS = -rcs

####### for Qemu
QEMU_SYSTEM_AARCH64	= qemu-system-aarch64
QEMU_AARCH64		= qemu-aarch64-static ## for freebsd
####### Files

HEADERS 	= include/macros.s \
	 	  include/globals.s \
		  include/fcntl.s

### Kernel
KERNEL = armv8bin
KERNEL_OBJS	= src/main.o \
		src/debug.o \
		src/mem.o

### STDLIB
STDLIB = stdlib.a
STDLIB_OBJS	= src/stdio.o \
		src/string.o \
		src/stdlib.o \
		src/linuxsys.o

### Linux userland programs
CAT = cat
CAT_OBJS	= userland/cat.o
NEWFILE = newfile
NEWFILE_OBJS = userland/newfile.o
READELF = readelf
READELF_OBJS = userland/readelf.o

## compilation of all userland programs
USERLAND = $(CAT) $(NEWFILE)
USERLAND_OBJS = $(CAT_OBJS) $(NEWFILE_OBJS)


## assembly and linking
all: $(KERNEL) $(STDLIB) $(USERLAND)

$(STDLIB): $(STDLIB_OBJS)
	$(AR) $(ARFLAGS) $(STDLIB) $(STDLIB_OBJS)

$(KERNEL):  $(KERNEL_OBJS) $(STDLIB)
	$(LD) $(LDFLAGS) -o $(KERNEL) $(KERNEL_OBJS) $(STDLIB)

$(CAT):  $(STDLIB) $(CAT_OBJS)
	$(LD) -o $(CAT) $(CAT_OBJS) $(STDLIB) src/mem.o

$(NEWFILE):  $(STDLIB) $(NEWFILE_OBJS)
	$(LD) -o $(NEWFILE) $(NEWFILE_OBJS) $(STDLIB)

$(READELF):  $(STDLIB) $(READELF_OBJS)
	$(LD) -o $(READELF) $(READELF_OBJS) $(STDLIB)

clean: 
	rm -f $(KERNEL_OBJS) $(STDLIB_OBJS) $(USERLAND_OBJS)
	rm -f $(KERNEL) $(STDLIB) $(USERLAND)

####### Compile

main.o: src/main.s $(HEADERS)
	$(AS) $(ASFLAGS) -o @ src/main.s

stdio.o: src/stdio.s $(HEADERS)
	$(AS) $(ASFLAGS) -o @ src/stdio.s

debug.o: src/debug.s $(HEADERS)
	$(AS) $(ASFLAGS) -o @ src/debug.s

string.o: src/string.s $(HEADERS)
	$(AS) $(ASFLAGS) -o @ src/string.s

stdlib.o: src/stdlib.s $(HEADERS)
	$(AS) $(ASFLAGS) -o @ src/stdlib.s

mem.o: src/mem.s $(HEADERS)
	$(AS) $(ASFLAGS) -o @ src/mem.s

linuxsys.o: src/linuxsys.s $(HEADERS)
	$(AS) $(ASFLAGS) -o @ src/linuxsys.s

## userland
cat.o: userland/cat.s $(HEADERS)
	$(AS) $(ASFLAGS) -o @ userland/cat.s

newfile.o: userland/newfile.s $(HEADERS)
	$(AS) $(ASFLAGS) -o @ userland/newfile.s

readelf.o: userland/readelf.s $(HEADERS)
	$(AS) $(ASFLAGS) -o @ userland/readelf.s

####### Install

install:   FORCE
uninstall:   FORCE
FORCE:
run:	linux-run

linux-run:	$(KERNEL)
	@echo running in linux usermode. See that write branches to write_linux
	$(QEMU_AARCH64) -L / $(KERNEL)

system-run:	$(KERNEL)
	@echo running in full system emulation mode. See that write branches to puts
	$(QEMU_SYSTEM_AARCH64) -machine virt -cpu cortex-a57 -nographic -smp 1 -m 2 -kernel $(KERNEL) --append "console=ttyAMA0"

